@startuml AWS_Deployment
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

LAYOUT_WITH_LEGEND()

title AWS Deployment Diagram for Langflow

Deployment_Node(aws, "AWS Cloud", "Amazon Web Services") {
    Deployment_Node(cloudfront, "Content Delivery", "AWS CloudFront") {
        Container(cdn, "CloudFront Distribution", "CDN", "Distributes frontend content globally")
    }
    
    Deployment_Node(apigateway, "API Layer", "AWS API Gateway") {
        Container(api_gateway, "API Gateway", "REST/WebSocket", "Manages API endpoints and authentication")
    }
    
    Deployment_Node(ecs_cluster, "Compute Layer", "Amazon ECS/EKS") {
        Container(frontend_container, "Frontend Containers", "Nginx, React", "Serves the Langflow UI")
        Container(backend_container, "Backend API Containers", "FastAPI", "Processes API requests")
        Container(flow_engine_container, "Flow Engine Containers", "Python", "Executes AI workflows")
    }
    
    Deployment_Node(data_layer, "Data Layer", "") {
        Deployment_Node(rds, "Database", "Amazon RDS") {
            ContainerDb(postgres, "PostgreSQL", "Relational Database", "Stores flows, users, and application data")
        }
        
        Deployment_Node(elasticache, "Cache", "Amazon ElastiCache") {
            ContainerDb(redis, "Redis", "In-memory cache", "Caches API responses and session data")
        }
        
        Deployment_Node(s3_storage, "Object Storage", "Amazon S3") {
            Container(s3_assets, "Static Assets Bucket", "S3", "Stores frontend assets")
            Container(s3_uploads, "Uploads Bucket", "S3", "Stores user uploaded files")
            Container(s3_exports, "Exports Bucket", "S3", "Stores flow exports and backups")
        }
    }
    
    Deployment_Node(messaging, "Messaging", "Amazon SQS") {
        Container(sqs_queue, "Flow Execution Queue", "SQS", "Queues flow execution requests")
    }
    
    Deployment_Node(serverless, "Serverless", "AWS Lambda") {
        Container(lambda_functions, "Integration Functions", "Lambda", "Handles integrations with external systems")
    }
    
    Deployment_Node(identity, "Identity", "AWS Cognito") {
        Container(cognito_userpool, "User Pool", "Cognito", "Manages user authentication")
    }
    
    Deployment_Node(security, "Security", "") {
        Container(secrets_manager, "Secrets Manager", "AWS Secrets Manager", "Manages API keys and credentials")
        Container(kms, "Key Management", "AWS KMS", "Manages encryption keys")
    }
    
    Deployment_Node(monitoring, "Monitoring", "") {
        Container(cloudwatch, "CloudWatch", "Monitoring", "Logs, metrics, and alerts")
        Container(xray, "X-Ray", "Tracing", "Distributed tracing")
    }
    
    Deployment_Node(network, "Networking", "Amazon VPC") {
        Container(vpc_endpoints, "VPC Endpoints", "PrivateLink", "Secure connections to AWS services")
        Container(transit_gateway, "Transit Gateway", "Network routing", "Connects to corporate network")
    }
}

Deployment_Node(corporate, "Corporate Network", "Internal Infrastructure") {
    Deployment_Node(confluence, "Confluence", "Atlassian") {
        Container(confluence_server, "Confluence Server", "Java", "Internal wiki and documentation")
    }
    
    Container(internal_systems, "Other Internal Systems", "Various", "Other corporate applications")
    
    Deployment_Node(client_apps, "Client Applications", "") {
        Container(web_app, "Web Applications", "JavaScript", "Browser-based applications")
        Container(mobile_app, "Mobile Applications", "iOS/Android", "Native mobile applications")
    }
    
    Deployment_Node(corporate_identity, "Corporate Identity", "") {
        Container(idp, "Identity Provider", "SAML/OIDC", "Corporate user authentication")
    }
}

' Frontend connections
Rel(cdn, frontend_container, "Distributes content from")
Rel(frontend_container, s3_assets, "Loads assets from")
Rel(frontend_container, api_gateway, "Makes API calls to")

' API Gateway connections
Rel(api_gateway, backend_container, "Routes requests to")
Rel(api_gateway, cognito_userpool, "Authenticates with")

' Backend connections
Rel(backend_container, flow_engine_container, "Executes flows using")
Rel(backend_container, postgres, "Stores data in")
Rel(backend_container, redis, "Caches data in")
Rel(backend_container, s3_uploads, "Stores uploads in")
Rel(backend_container, s3_exports, "Stores exports in")
Rel(backend_container, sqs_queue, "Queues tasks in")
Rel(backend_container, secrets_manager, "Retrieves secrets from")

' Flow engine connections
Rel(flow_engine_container, postgres, "Retrieves flow definitions from")
Rel(flow_engine_container, redis, "Caches results in")
Rel(flow_engine_container, sqs_queue, "Processes tasks from")
Rel(flow_engine_container, s3_uploads, "Reads files from")

' SQS connections
Rel(sqs_queue, lambda_functions, "Triggers")

' Lambda connections
Rel(lambda_functions, vpc_endpoints, "Connects through")
Rel(lambda_functions, confluence_server, "Integrates with")
Rel(lambda_functions, internal_systems, "Integrates with")

' Network connections
Rel(transit_gateway, confluence, "Connects to")
Rel(cognito_userpool, idp, "Federates with")

' Client connections
Rel(web_app, api_gateway, "Makes API calls to")
Rel(mobile_app, api_gateway, "Makes API calls to")
Rel(client_apps, idp, "Authenticates with")

' Monitoring connections
Rel(ecs_cluster, cloudwatch, "Sends logs and metrics to")
Rel(backend_container, xray, "Sends traces to")
Rel(api_gateway, cloudwatch, "Sends logs to")

@enduml