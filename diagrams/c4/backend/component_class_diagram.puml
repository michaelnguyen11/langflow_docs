@startuml C4_Component_Class
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' Allow mixing of classes with C4 notation
allowmixing

LAYOUT_WITH_LEGEND()

title Class diagram for Langflow Component System

' Use standard class diagram notation instead of mixing with C4 inside boundaries
' Define the classes first

' Base Classes
class BaseComponent {
    +_id: str
    +_code: str
    +build(): Any
    +build_template_config(): dict
}

class CustomComponent {
    +is_input: bool
    +is_output: bool
    +field_config: dict
    +field_order: list[str]
    +set_attributes(parameters: dict): None
}

class Component {
    +inputs: list[InputTypes]
    +outputs: list[Output]
    +_parameters: dict
    +_inputs: dict
    +_outputs_map: dict
    +_results: dict
    +set(**kwargs): Component
    +run(): Any
    +map_inputs(inputs: list): None
    +map_outputs(): None
    +_run(): Any
}

' Input/Output System
class InputTypes {
    +name: str
    +display_name: str
    +type: str
    +info: str
    +advanced: bool
    +default: Any
    +required: bool
}

class Output {
    +name: str
    +display_name: str
    +method: str
    +info: str
    +type: str
    +value: Any
}

class EdgeData {
    +source: str
    +target: str
    +sourceHandle: dict
    +targetHandle: dict
}

' Specialized Components
class LLMComponent {
    +model_name: str
    +api_key: str
    +build_llm(): Any
}

class AgentComponent {
    +agent_type: str
    +tools: list
    +build_agent(): Any
}

class ChainComponent {
    +chain_type: str
    +memory: Memory
    +build_chain(): Any
}

class ToolComponent {
    +build_tool(): Any
}

' Component Services
class ComponentRegistry {
    +register_component(component: Type[Component]): None
    +get_component(name: str): Type[Component]
    +get_all_components(): list[Type[Component]]
}

class FlowExecutor {
    +execute_flow(flow: Flow): dict
}

class GraphProcessor {
    +process_graph(graph: dict): Flow
}

class EventManager {
    +publish_event(event: Event): None
    +subscribe(event_type: str, callback: Callable): None
}

' Class relationships
BaseComponent <|-- CustomComponent
CustomComponent <|-- Component
Component <|-- LLMComponent
Component <|-- AgentComponent
Component <|-- ChainComponent
Component <|-- ToolComponent

Component --> InputTypes : contains
Component --> Output : produces
Component --> EdgeData : connects with

ComponentRegistry --> Component : manages
FlowExecutor --> Component : executes
GraphProcessor --> Component : arranges

' Add C4 components to represent the system structure
ContainerDb(flow_db, "Flow Database", "SQLite/PostgreSQL", "Stores flow configurations")
Container(frontend, "Frontend Application", "React/TypeScript", "User interface")
Container(backend, "Backend", "Python/FastAPI", "Server-side logic")
Component(api_layer, "API Layer", "FastAPI", "REST API")
Component(component_system, "Component System", "Python", "Core component management")

' Connect the C4 elements
Rel(api_layer, ComponentRegistry, "uses")
Rel(api_layer, FlowExecutor, "uses")
Rel(api_layer, GraphProcessor, "uses")
Rel(frontend, api_layer, "calls")
Rel(api_layer, flow_db, "reads/writes")
Rel_R(component_system, ComponentRegistry, "contains")

@enduml