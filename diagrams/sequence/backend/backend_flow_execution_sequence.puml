@startuml Backend_Flow_Execution
title Langflow Backend - Flow Execution Sequence

participant "API Endpoint" as API
participant "Flow Controller" as FlowController
participant "Flow Service" as FlowService
database "Database" as DB
participant "Graph Processor" as GraphProcessor
participant "Component Registry" as ComponentRegistry
participant "Flow Executor" as FlowExecutor
participant "External Services" as ExternalAPI

API -> FlowController: POST /api/v1/flows/{id}/execute (inputs)
FlowController -> FlowService: execute_flow(flow_id, inputs)
FlowService -> DB: get_flow(flow_id)
DB --> FlowService: flow_data

FlowService -> GraphProcessor: process_graph(flow_data)
GraphProcessor -> GraphProcessor: validate_graph()
GraphProcessor -> GraphProcessor: topological_sort()
GraphProcessor -> ComponentRegistry: get_component_classes()
ComponentRegistry --> GraphProcessor: component_classes
GraphProcessor -> GraphProcessor: build_graph()
GraphProcessor --> FlowService: processed_graph

FlowService -> FlowExecutor: execute(processed_graph, inputs)
activate FlowExecutor

FlowExecutor -> FlowExecutor: initialize_components()
loop For each node in execution order
    FlowExecutor -> FlowExecutor: get_node_inputs()
    
    alt Node uses external service
        FlowExecutor -> ExternalAPI: API request
        ExternalAPI --> FlowExecutor: API response
    end
    
    FlowExecutor -> FlowExecutor: execute_node()
    FlowExecutor -> FlowExecutor: store_node_output()
    FlowExecutor -> FlowExecutor: update_execution_state()
end

alt Error occurs
    FlowExecutor -> FlowExecutor: handle_error()
    FlowExecutor -> FlowExecutor: rollback_if_needed()
end

FlowExecutor -> FlowExecutor: collect_outputs()
deactivate FlowExecutor

FlowExecutor --> FlowService: execution_results
FlowService -> FlowService: format_response()
FlowService --> FlowController: formatted_results
FlowController -> API: return response

@enduml